
# Solution to https://projecteuler.net/archives questions in Haskel

# prob-1 = 233168

sum [x|x<-[1..999], (((mod x 3)==0) || ((mod x 5)==0))]


# prob-2 = 4613732

fib1 = (map fib' [0 ..] !!)  -- considerably faster then other
    where               -- https://wiki.haskell.org/Let_vs._Where
      fib' 0 = 0
      fib' 1 = 1
      fib' n = fib1 (n - 1) + fib1 (n - 2)

head [x|x<-[1..],fib1 x >=4000000] -- gives 34, fib1 34 = 5702887

sum[term|
        x<-[1..(head [x|x<-[1..],fib1 x >=4000000] - 1)],
        let term = fib1 x, 
        mod term 2 == 0]


# prob-3 = 6857

factor :: (Integral a) => a -> [a]
factor 1 = []
factor x = fact:factor (quot x fact)
    where fact = head [y|y<-[2 .. (quot x 2)]++[x], mod x y ==0]

last (factor 600851475143)


# prob-4 = 906609

foldr max 1 (let num = [999,998..100] 
                in [total|
                        x<-num,
                        y<-num,
                        let total=x*y, 
                        (show total) == reverse (show total)
                    ])


# prob-5 = 232792560 #to-do

-- sol-1, -- bruteforce solution : too slow
head [num|num<-[1..],(foldr (&&) True [(mod num x)==0 |x<-[1..20]])]  


# prob-6 = 25164150

let num = 100 in ((sum[1 .. num])^2 - sum[x^2|x<-[1.. num]])


# prob-7 = 104743

--Option 1 (slow)
prime1 = (map prime' [0 ..] !! ) -- much faster, still not enough
    where
        prime' 0 = 1
        prime' 1 = 2
        prime' 2 = 3
        prime' n = head [y|
                            y<-(let start = (prime1 (n-1)) 
                                    in [start+2, start+4 ..]),
                                head ([False| 
                                        z<-[1.. (n-1)],
                                        (mod y (prime1 z)) ==0
                                      ]++[True]
                                     )]

-- Option 2 (final version) (comparatively faster)
prime1 = (map prime' [0 ..] !! ) -- much faster, still not enough
    where                        -- saves primes to memory as it calculates.
        prime' 0 = 1
        prime' 1 = 2
        prime' 2 = 3
        prime' n = head [y|y<-(let start = (prime1 (n-1)) in [start+2, start+4 ..]), head ([False| z<- (takeWhile (\c -> fromIntegral c < sqrt(fromIntegral(prime1 (n-1))+100)) (map prime1 [1.. n-1])), (mod y z) ==0]++[True])]


-- Option 3 (faster than 1)
prime1 = (map prime' [0 ..] !! ) -- much faster, still not enough
    where                        -- saves primes to memory as it calculates.
        prime' 0 = 1
        prime' 1 = 2
        prime' 2 = 3
        prime' n = head [y|y<-(let start = (prime1 (n-1)) in [start+2, start+4 ..]), head ([False| z<-[1.. range], (mod y (prime1 z)) ==0]++[True])]
            where
                range = head[a|a<-[1..], fromIntegral(prime1 a) > sqrt(fromIntegral (prime1 (n-1)))]


# prob-8 #to-do


# prob-9 = 31875000

let sum = 1000 
    in (foldr (*) 1 (head [[x,y,z]|
                                x<-[quot sum 3 .. quot sum 2], 
                                z<-[1.. quot (x*71) 100], 
                                let y=sum-x-z,
                                x^2==(y^2+z^2)
                          ]))

# prob-10 = 142913828922

sum (takeWhile (<2000000) (map prime1 [1..])) -- took 20h CPU time


# prob-20 = 648

sum[read [x] :: Int |x<-show (foldr (*) 1 [1..100])]


# prob-25 = 4782

head [x|x<-[1..], fib1 x > 10^999]


# prob-29 = 9183

removeDuplicate :: (Eq a) => [a] -> [a]
removeDuplicate [] = []
removeDuplicate (x:xs) = if (elem x xs)
                            then removeDuplicate xs
                            else x: removeDuplicate xs

length(removeDuplicate (let num = [2..100] in [x^y|x<-num,y<-num]))


# prob-30 = 443839

sum [x|x<-[2.. 6*9^5], sum[(read [d] :: Integer)^5 |d<-(show x)]==x ]


# prob-39 = 840

snd (foldr max (0,0) [(count,sum)|
                        sum<-[1..1000], 
                        let count = (length [(a,b,c)|
                                                a<-[quot sum 3 .. quot sum 2], 
                                                c<-[1.. quot (a*71) 100], 
                                                let b=(sum-a-c), 
                                                b>c, 
                                                a^2 == (b^2+c^2) 
                                            ]) 
                      ])


# prob-48 = 9110846700

mod (sum [mod (x^x) (10^10)| x<-[1..1000]]) (10^10)
